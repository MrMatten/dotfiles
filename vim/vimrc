scriptencoding utf-8

set nocompatible
set langmenu=en_US
set encoding=utf-8
set fileencoding=utf-8

let mapleader = ","

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
if has('nvim')
    " LSP config
    Plug 'neovim/nvim-lspconfig'
    Plug 'williamboman/nvim-lsp-installer'
    Plug 'folke/trouble.nvim'
    Plug 'kyazdani42/nvim-web-devicons'
    Plug 'creativenull/diagnosticls-configs-nvim'

    " Snippet completion
    Plug 'hrsh7th/nvim-cmp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-cmdline'
    Plug 'L3MON4D3/LuaSnip'
    Plug 'saadparwaiz1/cmp_luasnip'
    Plug 'David-Kunz/cmp-npm'

    " Dashboard
    Plug 'glepnir/dashboard-nvim'

    " Git
    Plug 'nvim-lua/plenary.nvim'
    Plug 'lewis6991/gitsigns.nvim'

    " Highlight Colours
    Plug 'norcalli/nvim-colorizer.lua'

    " File Management
    Plug 'nvim-lua/popup.nvim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
    Plug 'sharkdp/fd'
    Plug 'BurntSushi/ripgrep'
    Plug 'kelly-lin/telescope-ag'
    Plug 'nvim-telescope/telescope-file-browser.nvim'
    Plug 'sudormrfbin/cheatsheet.nvim'
    Plug 'kyazdani42/nvim-tree.lua'
    Plug 'kyazdani42/nvim-web-devicons' " for file icons
    Plug 'ThePrimeagen/harpoon'

    " https://github.com/nvim-treesitter/nvim-treesitter/issues/1111
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    Plug 'JoosepAlviste/nvim-ts-context-commentstring'
    Plug 'MaxMEllon/vim-jsx-pretty' " fix indentation in jsx until treesitter can
    Plug 'jxnblk/vim-mdx-js'
    Plug 'tpope/vim-obsession'

    " test
    Plug 'vim-test/vim-test'
endif
" Colours
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'chriskempson/base16-vim'

" Status line
Plug 'itchyny/lightline.vim'

" Languages
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'sheerun/vim-polyglot'

" Extra functionality
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
call plug#end()

" Dashboard settings
let g:dashboard_default_executive ='telescope'
nmap <leader>sa :<C-u>SessionSave<CR>
nmap <leader>sl :<C-u>SessionLoad<CR>
nnoremap <silent> <leader>fh :DashboardFindHistory<CR>
nnoremap <silent> <leader>tc :DashboardChangeColorscheme<CR>
nnoremap <silent> <leader>fb :DashboardJumpMark<CR>
nnoremap <silent> <leader>nf :DashboardNewFile<CR>
" nnoremap <silent> <Leader>fa :DashboardFindWord<CR>
" nnoremap <silent> <Leader>ff :DashboardFindFile<CR>

" LSP config
"" Setup autocomplete lsp 
set completeopt=menu,menuone,noselect,noinsert

lua << EOF
-- Setup nvim-cmp.
local cmp = require'cmp'
local luasnip = require("luasnip")

local has_words_before = function()
  local line, col = unpack(vim.api.nvim_win_get_cursor(0))
  return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
end

local feedkey = function(key, mode)
  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(key, true, true, true), mode, true)
end

cmp.setup({
    autoselect = false,
    snippet = {
        -- REQUIRED - you must specify a snippet engine
        expand = function(args)
            require('luasnip').lsp_expand(args.body)
        end,
    },
    mapping = {
        ['<C-e>'] = cmp.mapping.close(),
        ['<C-x>'] = cmp.mapping.complete(),
        ['<C-space>'] = cmp.mapping.confirm({
            behavior = cmp.ConfirmBehavior.Insert,        
            select = true
        }),
        ["<Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
                luasnip.expand_or_jump()
            elseif has_words_before() then
                cmp.complete()
            else
                fallback()
            end
        end, { "i", "s" }),

        ["<S-Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
                luasnip.jump(-1)
            else
                fallback()
            end
        end, { "i", "s" }),
    },
    sources = {
        { name = 'nvim_lsp' },
        { name = 'path' },
        { name = 'luasnip'},
        { name = 'buffer', keywork_length = 5 },
        { name = 'npm', keywork_length = 4 },
    }
})

require'lspconfig'.gopls.setup {}
require'lspconfig'.pylsp.setup {}

local util = require "lspconfig/util"
require'lspconfig'.tsserver.setup { 
    on_attach = function(client)
        client.resolved_capabilities.document_formatting = false
    end,
    root_dir = util.root_pattern(".git", "tsconfig.json", "jsconfig.json")
}
EOF

" williamboman/nvim-lsp-installer {{{
lua << EOF
local lsp_installer = require("nvim-lsp-installer")
lsp_installer.on_server_ready(function(server)
    local opts = {
      capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
    }
    server:setup(opts)
end)
EOF
" }}}

lua << EOF
-- npm install -g diagnostic-languageserver eslint_d prettier_d_slim prettier
local function on_attach(client)
  print('Attached to ' .. client.name)
end
local dlsconfig = require 'diagnosticls-configs'
dlsconfig.init {
  default_config = false,
  format = true,
  on_attach = on_attach,
}
local eslint = require 'diagnosticls-configs.linters.eslint'
local prettier = require 'diagnosticls-configs.formatters.prettier'
prettier.requiredFiles = {
    '.prettierrc',
    '.prettierrc.json',
    '.prettierrc.toml',
    '.prettierrc.json',
    '.prettierrc.yml',
    '.prettierrc.yaml',
    '.prettierrc.json5',
    '.prettierrc.js',
    '.prettierrc.cjs',
    'prettier.config.js',
    'prettier.config.cjs',
  }
dlsconfig.setup {
  ['javascript'] = {
    linter = eslint,
    formatter = { prettier }
  },
  ['javascriptreact'] = {
    linter = { eslint },
    formatter = { prettier }
  },
  ['css'] = {
    formatter = prettier
  },
  ['html'] = {
    formatter = prettier
  },
}
EOF

" vim-test/vim-test {{{
let test#strategy = "neovim"
let test#neovim#term_position = "vertical"
let g:test#javascript#runner = 'jest'
" https://github.com/vim-test/vim-test/issues/272
let g:root_markers = ['package.json', '.git/']
function! s:RunVimTest(cmd)
    " I guess this part could be replaced by projectionist#project_root
    for marker in g:root_markers
        let marker_file = findfile(marker, expand('%:p:h') . ';')
        if strlen(marker_file) > 0
            let g:test#project_root = fnamemodify(marker_file, ":p:h")
            break
        endif
        let marker_dir = finddir(marker, expand('%:p:h') . ';')
        if strlen(marker_dir) > 0
            let g:test#project_root = fnamemodify(marker_dir, ":p:h")
            break
        endif
    endfor

    execute a:cmd
endfunction
nnoremap <leader>tt :call <SID>RunVimTest('TestNearest')<cr>
nnoremap <leader>tl :call <SID>RunVimTest('TestLast')<cr>
nnoremap <leader>tf :call <SID>RunVimTest('TestFile')<cr>
nnoremap <leader>ts :call <SID>RunVimTest('TestSuite')<cr>
nnoremap <leader>tv :call <SID>RunVimTest('TestVisit')<cr>
if has('nvim')
  tmap <C-f> <C-\><C-n>
endif
"}}}


" Setup telescope
lua << EOF
require'telescope'.setup {
  defaults = {
      file_ignore_patterns = { "yarn.lock", "node_modules/" }
  },
  pickers = {
    buffers = {
      show_all_buffers = true,
      sort_lastused = true,
      mappings = {
        i = {
          ["<M-d>"] = "delete_buffer",
        }
      }
    }
  }
}
require'telescope'.load_extension 'fzf'
require'telescope'.load_extension 'ag'
require"telescope".load_extension 'file_browser'
EOF
nnoremap <leader>ag :Ag <c-r>=expand("<cword>")<cr><Enter>
nnoremap <leader>ff :lua require'telescope.builtin'.find_files{ hidden = true }<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <Leader>fc :lua require'telescope.builtin'.git_status{}<cr>
nnoremap <Leader>cb :lua require'telescope.builtin'.git_branches{}<cr>
nnoremap <leader>fr :lua require'telescope.builtin'.resume{}<CR>

nnoremap <silent> gd    <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> gh    <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gca   <cmd>:Telescope lsp_code_actions<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> gR    <cmd>lua vim.lsp.buf.rename()<CR>
nnoremap <silent> gE    <cmd>lua vim.diagnostic.open_float()<CR>
nnoremap <silent><leader>fo <cmd>lua vim.lsp.buf.formatting()<CR>
" Setup trouble
lua require'trouble'.setup()
nnoremap <leader>xx <cmd>TroubleToggle<cr>
nnoremap <leader>xw <cmd>TroubleToggle workspace_diagnostics<cr>
nnoremap <leader>xd <cmd>TroubleToggle document_diagnostics<cr>
nnoremap <leader>xq <cmd>TroubleToggle quickfix<cr>
nnoremap <leader>xl <cmd>TroubleToggle loclist<cr>
" nnoremap gR <cmd>TroubleToggle lsp_references<cr>

" kyazdani42/nvim-tree.lua {{{
lua << EOF
require'nvim-tree'.setup {
    actions = {
        open_file = {
            quit_on_open = true,
        },
    },
}
EOF

nnoremap <C-n> :NvimTreeToggle<CR>
nnoremap <leader>r :NvimTreeRefresh<CR>
nnoremap <leader>n :NvimTreeFindFile<CR>
"}}}

" Color highlighter
set termguicolors
lua require'colorizer'.setup()

" Add homebrew fzf to the vim path:
set rtp+=/usr/local/opt/fzf

" copy to clipboard
noremap <leader>c "*y

" Lightline
let g:lightline = {
            \ 'colorscheme': 'one',
            \ }

" Rename and delete commands
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

noremap <leader>ren :call RenameFile()<cr>
nnoremap <leader>rm :call delete(expand('%')) \| bdelete!<CR>

" Clear search highlights
noremap <silent><leader>/ :nohls<CR>

" Use 'h', 'j', 'k' and 'l' to nagivate splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader><Tab> <C-w>w

" Open splits with leader
noremap <leader>vs :vs %<cr>
noremap <leader>ss :split %<cr>

" Tabs
noremap <leader>tn :tabNext <cr>
noremap <leader>tp :tabprevious <cr>
noremap <leader>tc :tabnew <cr>

" Golang
noremap <leader>å :GoImports <cr>

" Python
let g:syntastic_python_python_exec = 'python3' 
let g:python3_host_prog = '/opt/homebrew/bin/python3'

" Reload vimrc
nnoremap <leader>rld :source $MYVIMRC<CR> 

set showcmd                                 " Display incomplete commands
set showmode                                " Display the mode you're in
set pastetoggle=<F2>
set backspace=indent,eol,start              " Intuitive backspacing
set hidden                                  " Handle multiple buffers better
" set wildmenu                                " Enhanced command line completion
set wildmode=list:longest                   " Complete files like a shell
set wildignore+=*/node_modules/**
set ignorecase                              " Case-insensitive searching
set smartcase                               " But case-sensitive if expression contains a capital letter
set number                                  " Show line numbers
set relativenumber                          " Show numbers relative to position
set ruler                                   " Show cursor position
set incsearch                               " Highlight matches as you type
set hlsearch                                " Highlight matches
set nofoldenable                            " Disable folding
set wrap                                    " Turn on line wrapping
set scrolloff=6                             " Show 3 lines of context around the cursor.
set showmatch
set title                                   " Set the terminal's title
set visualbell                              " No beeping
set noerrorbells                            " Stop the beeping idea vim
set noeb vb t_vb=                           " Stop the god damn beeps!
set nobackup                                " Don't make a backup before overwriting a file
set nowritebackup                           " And again
set noswapfile                              " Don't make swapfiles
set backupskip=/tmp/*,/private/tmp/*
set undodir=~/.vim/undo
set expandtab                               " Use spaces instead of tabs
" set tabstop=4                               " <Tab> == 4 spaces
" set shiftwidth=4
" set backspace=2
" set smarttab
set laststatus=2                            " Always show the status line
set autoindent                              " Indent at the same level as previous line
" set smartindent
set shortmess=a                             " Avoid 'Hit ENTER to continue'

colorscheme hybrid_material
set termguicolors

filetype plugin indent on
syntax on

