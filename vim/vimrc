scriptencoding utf-8

set nocompatible
set langmenu=en_US
set encoding=utf-8
set fileencoding=utf-8

let mapleader = ","

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
if has('nvim')
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
endif
Plug 'chriskempson/base16-vim'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'itchyny/lightline.vim'
Plug 'janko/vim-test'
Plug 'junegunn/fzf.vim'
Plug '/usr/local/opt/fzf'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'w0rp/ale'
call plug#end()

" Open FZF results in Quickfix (Ctrl+A and then Ctrl+Q)
let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

function! s:build_quickfix_list(lines)
    call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
    copen
    cc
endfunction

let g:fzf_action = {
            \ 'ctrl-q': function('s:build_quickfix_list'),
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-x': 'split',
            \ 'ctrl-v': 'vsplit' }

" Mappings for IO operations
noremap <leader>w :w<CR>
noremap <leader>q :q<CR>
noremap <leader>f :FZF<CR>

" copy to clipboard
noremap <leader>c "*y

" Quick commands for NERDTREE
nnoremap <leader>n :NERDTreeToggle<CR>

" Formatting
nmap <silent> <leader>xml :%!xmllint --format -<CR>
nmap <silent> <leader>json :%!python -m json.tool<CR>
nmap <silent> <leader>lint :ALEFix<CR>

" Search current word
noremap <leader>ag :Ag <c-r>=expand("<cword>")<cr><Enter>
nnoremap \ :Ag<SPACE>

" Language Server Coc
set cmdheight=2
set updatetime=300
set shortmess+=c
if has("patch-8.1.1564")
    set signcolumn=number
else
    set signcolumn=yes
endif
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

if has('nvim')
    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>o  <Plug>(coc-format-selected)
    nmap <leader>o  <Plug>(coc-format-selected)

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    exec "nmap <silent> gd <Plug>(coc-definition)"
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
endif


" Lightline
let g:lightline = {
            \ 'colorscheme': 'one',
            \ }

" Rename and delete commands
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

noremap <leader>ren :call RenameFile()<cr>
nnoremap <leader>rm :call delete(expand('%')) \| bdelete!<CR>


" Tests
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

" Clear search highlights
noremap <silent><leader>/ :nohls<CR>

" Use 'h', 'j', 'k' and 'l' to nagivate splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader><Tab> <C-w>w

" Open splits with leader
noremap <leader>vs :vs %<cr>
noremap <leader>ss :split %<cr>

" Tabs
noremap <leader>tr :tabNext <cr>
noremap <leader>tp :tabprevious <cr>
noremap <leader>tn :tabnew <cr>

set showcmd                                 " Display incomplete commands
set showmode                                " Display the mode you're in
set pastetoggle=<F2>
set backspace=indent,eol,start              " Intuitive backspacing
set hidden                                  " Handle multiple buffers better
set wildmenu                                " Enhanced command line completion
set wildmode=list:longest                   " Complete files like a shell
set ignorecase                              " Case-insensitive searching
set smartcase                               " But case-sensitive if expression contains a capital letter
set number                                  " Show line numbers
set ruler                                   " Show cursor position
set incsearch                               " Highlight matches as you type
set hlsearch                                " Highlight matches
set nofoldenable                            " Disable folding
set wrap                                    " Turn on line wrapping
set scrolloff=6                             " Show 3 lines of context around the cursor.
set showmatch
set title                                   " Set the terminal's title
set visualbell                              " No beeping
set noerrorbells                            " Stop the beeping idea vim
set noeb vb t_vb=                           " Stop the god damn beeps!
set nobackup                                " Don't make a backup before overwriting a file
set nowritebackup                           " And again
set noswapfile                              " Don't make swapfiles
set backupskip=/tmp/*,/private/tmp/*
set undodir=~/.vim/undo
set expandtab                               " Use spaces instead of tabs
set tabstop=4                               " <Tab> == 4 spaces
set shiftwidth=4
set backspace=2
set smarttab
set laststatus=2                            " Always show the status line
set autoindent                              " Indent at the same level as previous line
set smartindent
set shortmess=a                             " Avoid 'Hit ENTER to continue'

colorscheme hybrid_material
set termguicolors

filetype plugin indent on
syntax on

