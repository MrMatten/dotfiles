scriptencoding utf-8

set nocompatible
set langmenu=en_US
set encoding=utf-8
set fileencoding=utf-8

let mapleader = ","

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
if has('nvim')
    " LSP config
    Plug 'neovim/nvim-lspconfig'
    Plug 'williamboman/nvim-lsp-installer'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-cmdline'
    Plug 'hrsh7th/nvim-cmp'

    " Snippet completion
    Plug 'hrsh7th/cmp-vsnip'
    Plug 'hrsh7th/vim-vsnip'

    " Dashboard
    Plug 'glepnir/dashboard-nvim'

    " File tree
    Plug 'luukvbaal/nnn.nvim'

    " Git
    Plug 'nvim-lua/plenary.nvim'
    Plug 'lewis6991/gitsigns.nvim'

    " Highlight Colours
    Plug 'norcalli/nvim-colorizer.lua'
endif
" Colours
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'chriskempson/base16-vim'

" Status line
Plug 'itchyny/lightline.vim'

" Search for file
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" Languages
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'sheerun/vim-polyglot'

" Extra functionality
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
call plug#end()

" Dashboard settings
let g:dashboard_default_executive ='fzf'
nmap <Leader>sa :<C-u>SessionSave<CR>
nmap <Leader>sl :<C-u>SessionLoad<CR>
nnoremap <silent> <Leader>fh :DashboardFindHistory<CR>
nnoremap <silent> <Leader>ff :DashboardFindFile<CR>
nnoremap <silent> <Leader>tc :DashboardChangeColorscheme<CR>
nnoremap <silent> <Leader>fa :DashboardFindWord<CR>
nnoremap <silent> <Leader>fb :DashboardJumpMark<CR>
nnoremap <silent> <Leader>cn :DashboardNewFile<CR>

" LSP config
"" Setup autocomplete lsp 
set completeopt=menu,menuone,noselect,noinsert

lua << EOF
-- Setup nvim-cmp.
local cmp = require'cmp'

local has_words_before = function()
  local line, col = unpack(vim.api.nvim_win_get_cursor(0))
  return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
end

local feedkey = function(key, mode)
  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(key, true, true, true), mode, true)
end

cmp.setup({
    snippet = {
        -- REQUIRED - you must specify a snippet engine
        expand = function(args)
        vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
    end,
    },
    mapping = {
        ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
        ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
        ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
        ['<C-e>'] = cmp.mapping({
            i = cmp.mapping.abort(),
            c = cmp.mapping.close(),
        }),
        ['<CR>'] = cmp.mapping.confirm({ select = true }),
        ["<Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_next_item()
            elseif vim.fn["vsnip#available"](1) == 1 then
                feedkey("<Plug>(vsnip-expand-or-jump)", "")
            elseif has_words_before() then
                cmp.complete()
            else
                fallback() -- The fallback function sends a already mapped key. In this case, it's probably `<Tab>`.
            end
        end, { "i", "s" }),

        ["<S-Tab>"] = cmp.mapping(function()
            if cmp.visible() then
                cmp.select_prev_item()
            elseif vim.fn["vsnip#jumpable"](-1) == 1 then
                feedkey("<Plug>(vsnip-jump-prev)", "")
            end
        end, { "i", "s" }),
    },
    sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'vsnip' }, -- For vsnip users.
    }, {
        { name = 'buffer' },
    })
})

  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline('/', {
      sources = {
          { name = 'buffer' }
          }
      })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
      sources = cmp.config.sources({
      { name = 'path' }
      }, {
      { name = 'cmdline' }
      })
  })

  -- Setup lspconfig.
  local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
  require'lspconfig'.gopls.setup { capabilities = capabilities }
  require'lspconfig'.pylsp.setup { 
      capabilities = capabilities,
  }
EOF

" Setup for nnn
lua require"nnn".setup()
tnoremap <leader>n <cmd>NnnExplorer<CR>
nnoremap <leader>n <cmd>NnnExplorer %:p:h<CR>
tnoremap <leader>p <cmd>NnnPicker<CR>
nnoremap <leader>p <cmd>NnnPicker<CR>

" Color highlighter
set termguicolors
lua require'colorizer'.setup()

" Open FZF results in Quickfix (Ctrl+A and then Ctrl+Q)
let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" Add homebrew fzf to the vim path:
set rtp+=/usr/local/opt/fzf

function! s:build_quickfix_list(lines)
    call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
    copen
    cc
endfunction

let g:fzf_action = {
            \ 'ctrl-q': function('s:build_quickfix_list'),
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-x': 'split',
            \ 'ctrl-v': 'vsplit' }

" Mappings for IO operations
noremap <leader>f :FZF<CR>

" copy to clipboard
noremap <leader>c "*y

" Search current word
noremap <leader>ag :Ag <c-r>=expand("<cword>")<cr><Enter>

" Lightline
let g:lightline = {
            \ 'colorscheme': 'one',
            \ }

" Rename and delete commands
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

noremap <leader>ren :call RenameFile()<cr>
nnoremap <leader>rm :call delete(expand('%')) \| bdelete!<CR>

" Rename variable
" For local replace
nnoremap gr gd[{V%::s/<C-R>///gc<left><left><left>

" For global replace
nnoremap gR gD:%s/<C-R>///gc<left><left><left>

" Tests
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

" Clear search highlights
noremap <silent><leader>/ :nohls<CR>

" Use 'h', 'j', 'k' and 'l' to nagivate splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader><Tab> <C-w>w

" Open splits with leader
noremap <leader>vs :vs %<cr>
noremap <leader>ss :split %<cr>

" Tabs
noremap <leader>tn :tabNext <cr>
noremap <leader>tp :tabprevious <cr>
noremap <leader>tc :tabnew <cr>

" Golang
noremap <leader>Ã¥ :GoImports <cr>

" Python
let g:syntastic_python_python_exec = 'python3' 
let g:python3_host_prog = '/opt/homebrew/bin/python3'

set showcmd                                 " Display incomplete commands
set showmode                                " Display the mode you're in
set pastetoggle=<F2>
set backspace=indent,eol,start              " Intuitive backspacing
set hidden                                  " Handle multiple buffers better
set wildmenu                                " Enhanced command line completion
set wildmode=list:longest                   " Complete files like a shell
set ignorecase                              " Case-insensitive searching
set smartcase                               " But case-sensitive if expression contains a capital letter
set number                                  " Show line numbers
set relativenumber                          " Show numbers relative to position
set ruler                                   " Show cursor position
set incsearch                               " Highlight matches as you type
set hlsearch                                " Highlight matches
set nofoldenable                            " Disable folding
set wrap                                    " Turn on line wrapping
set scrolloff=6                             " Show 3 lines of context around the cursor.
set showmatch
set title                                   " Set the terminal's title
set visualbell                              " No beeping
set noerrorbells                            " Stop the beeping idea vim
set noeb vb t_vb=                           " Stop the god damn beeps!
set nobackup                                " Don't make a backup before overwriting a file
set nowritebackup                           " And again
set noswapfile                              " Don't make swapfiles
set backupskip=/tmp/*,/private/tmp/*
set undodir=~/.vim/undo
set expandtab                               " Use spaces instead of tabs
set tabstop=4                               " <Tab> == 4 spaces
set shiftwidth=4
set backspace=2
set smarttab
set laststatus=2                            " Always show the status line
set autoindent                              " Indent at the same level as previous line
set smartindent
set shortmess=a                             " Avoid 'Hit ENTER to continue'

colorscheme hybrid_material
set termguicolors

filetype plugin indent on
syntax on

